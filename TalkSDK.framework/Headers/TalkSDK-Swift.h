
#if TARGET_OS_SIMULATOR
// Generated by Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import AVKit;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import TwilioVoice;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TalkSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



enum AudioRoutingType : NSInteger;

/// Describes possible options for routing call’s audio input and output.
SWIFT_PROTOCOL("_TtP7TalkSDK18AudioRoutingOption_")
@protocol AudioRoutingOption
/// Localized name of the routing option.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Type of audio routing option.
@property (nonatomic, readonly) enum AudioRoutingType type;
@end


@interface AVAudioSessionPortDescription (SWIFT_EXTENSION(TalkSDK)) <AudioRoutingOption>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) enum AudioRoutingType type;
@end

/// Describes possible options for audio playback during the call.
typedef SWIFT_ENUM(NSInteger, AudioOutput, open) {
/// The call audio will be routed through the speakers.
  AudioOutputSpeaker = 0,
/// The call audio will be routed through the headset.
  AudioOutputHeadset = 1,
};


/// Describes type of an audio routing option.
typedef SWIFT_ENUM(NSInteger, AudioRoutingType, open) {
/// Used for routing option using built-in speakers and microphone.
  AudioRoutingTypeBuiltIn = 0,
/// Used for routing option using bluetooth connectivity.
  AudioRoutingTypeBluetooth = 1,
};





@class UIButton;
@class UILabel;

/// Represent the bottom buttons view in call screen.
/// This view contains buttons for: mute, change audio source and hang up actions.
/// The view contains buttons and matching title labels.
/// important:
/// You cannot change layout of elements. In case you need your own layout setup, use other SDK API methods and build your own Call View.
/// note:
/// Labels with text under the buttons are not the part of the buttons.
SWIFT_PROTOCOL("_TtP7TalkSDK15CallButtonsView_")
@protocol CallButtonsView
/// Button for changing the ongoing call’s audio configuration. It operates differently depending on Bluetooth enabled headsets being connnected to the device:
/// <ul>
///   <li>
///     By default it toggles the audio output between <code>headset</code> and <code>speaker</code>.
///   </li>
///   <li>
///     When Bluetooth headset is available the button displays picker for changing the audio routing.
///   </li>
/// </ul>
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified speakerButton;
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified speakerTitleLabel;
/// Button for disconnecting the call.
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified hangUpButton;
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified hangUpTitleLabel;
/// Button for muting/unmuting the microphone.
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified muteButton;
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified muteTitleLabel;
@end

@protocol MicrophonePermissionScreen;
@protocol RecordingConsentScreen;
enum RecordingConsentAnswer : NSInteger;

/// A screen presented before making a call, used to ask the user about necessary permissions that need to be granted.
/// This screen internally manages all required checks: microphone permission access, digital line recording consent configuration etc., and presents the appropriate UI:
/// <code>Microphone screen</code> view is presented if microphone permission is not granted
/// <code>Recording Consent Screen</code> view is presented only if <code>Recording Consent</code> configuration for the provided <code>Digital Line</code> is set to <code>optIn</code> or <code>optOut</code>. If during fetching of the configuration error occurs, the <code>Error View</code> will be shown.
/// important:
/// For better user experience before showing the <code>Call Configuration Screen</code> you may want to check for agents availability by calling a <code>Talk</code> object method:
/// \code
/// func lineStatus(digitalLine: DigitalLine, completion: @escaping (LineStatusResult) -> Void)
///
/// \endcodeThis screen will not be dismissed automatically. You need to provide the functionality on <code>cancelHandler</code> and <code>startCallHandler</code> handlers.
SWIFT_PROTOCOL("_TtP7TalkSDK23CallConfigurationScreen_")
@protocol CallConfigurationScreen
/// Container for UI elements shown as Microphone permission screen. Enables customization of UI controls such as font, text colors, etc.
@property (nonatomic, readonly, strong) id <MicrophonePermissionScreen> _Nonnull microphoneScreen;
/// Container for UI elements shown as Recording Consent screen. Enables customization of UI controls such as font, text colors, etc.
@property (nonatomic, readonly, strong) id <RecordingConsentScreen> _Nonnull recordingConsentScreen;
/// Handler that is called when end user cancels the configuration at any time.
@property (nonatomic, copy) void (^ _Nullable cancelHandler)(void);
/// Handler called after completing the configuration, it will be called with user’s <code>RecordingConsentAnswer</code>.
@property (nonatomic, copy) void (^ _Nullable startCallHandler)(enum RecordingConsentAnswer);
@end

@class NSCoder;

/// A view controller that is displayed before making a call, used to ask the user about necessary permissions that need to be granted.
SWIFT_CLASS("_TtC7TalkSDK31CallConfigurationViewController")
@interface CallConfigurationViewController : UIViewController <CallConfigurationScreen>
@property (nonatomic, readonly, strong) id <MicrophonePermissionScreen> _Nonnull microphoneScreen;
@property (nonatomic, readonly, strong) id <RecordingConsentScreen> _Nonnull recordingConsentScreen;
@property (nonatomic, copy) void (^ _Nullable cancelHandler)(void);
@property (nonatomic, copy) void (^ _Nullable startCallHandler)(enum RecordingConsentAnswer);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// Represents all required parameters to make a call.
SWIFT_PROTOCOL("_TtP7TalkSDK8CallData_")
@protocol CallData
/// Name of digital line configured by the admin in Talk Settings.
@property (nonatomic, readonly, copy) NSString * _Nonnull digitalLine;
/// Answer received from end user about recording the call.
@property (nonatomic, readonly) enum RecordingConsentAnswer recordingConsentAnswer;
@end


/// Represent the error view with <code>retry</code> and <code>cancel</code> buttons.
/// <code>CallErrorView</code> is visible when starting a call has failed. The screen will is shown full screen.
/// On that screen you can change fonts, text colors, background colors, etc.
/// important:
/// You cannot change layout of elements. In case you need your own layout setup, use other SDK API methods and build your own Call View.
SWIFT_PROTOCOL("_TtP7TalkSDK13CallErrorView_")
@protocol CallErrorView
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified titleLabel;
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified messageLabel;
/// Retry button. When user will tap it call will try to reconnect.
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified retryButton;
/// Cancel button. Tapping will close the Call Screen.
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified cancelButton;
@end

@class UIActivityIndicatorView;

/// Represent the loading view with activity indicator on the call screen.
/// When starting a call the SDK needs to prepare the call configuration.
/// At this time on the <code>CallScreen</code> an activity indicator with a title is shown.
/// This view has customizable font, text colors, background color, etc.
/// important:
/// You cannot change layout of elements. In case you need your own layout setup, use other SDK API methods and build your own Call View.
SWIFT_PROTOCOL("_TtP7TalkSDK15CallLoadingView_")
@protocol CallLoadingView
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified titleLabel;
@property (nonatomic, readonly, strong) UIActivityIndicatorView * _Null_unspecified activityIndicator;
@end

@class UIView;
@protocol CallTimerView;

/// A screen presented for an ongoing call.
/// This screen is shown during the all states of call (<code>starting</code>, <code>in progress</code>, <code>fail</code>, etc).
/// It contains various sub-views related to displaying info depending on call state.
/// note:
/// Labels with text under the buttons are not the part of button.
SWIFT_PROTOCOL("_TtP7TalkSDK10CallScreen_")
@protocol CallScreen
/// Loading view with activity indicator.
@property (nonatomic, readonly, strong) UIView <CallLoadingView> * _Nonnull callLoadingView;
/// Error view with retry and cancel buttons.
@property (nonatomic, readonly, strong) UIView <CallErrorView> * _Nonnull callErrorView;
/// Timer view displaying call duration.
@property (nonatomic, readonly, strong) UIView <CallTimerView> * _Nonnull callTimerView;
/// View containing call screen action buttons.
@property (nonatomic, readonly, strong) UIView <CallButtonsView> * _Nonnull callButtonsView;
/// Disconnects the call.
/// It is possible to manually disconnect the call from every state of the call. After disconnecting, the <code>callDidFinishHandler</code> is called.
- (void)disconnect;
@end

/// Represents all possible states of the call.
typedef SWIFT_ENUM(NSInteger, CallStatus, open) {
/// The call is connecting.
  CallStatusConnecting = 0,
/// The call has been connected.
  CallStatusConnected = 1,
/// The call has disconnected.
  CallStatusDisconnected = 2,
/// The call has been disconnected.
  CallStatusFailed = 3,
/// The call starts to reconnect.
  CallStatusReconnecting = 4,
/// The call has reconnected.
  CallStatusReconnected = 5,
};


/// Represent the timer view with a label showing call’s duration.
/// The view is shown when a call is in progress with the title <code>Call in progress</code> and an automatically updated timer label showing call’s duration in seconds.
/// On that screen you can change the font, text colors, background color, etc.
/// important:
/// You cannot change layout of elements. In case you need your own layout setup, use other SDK API methods and build your own Call View.
SWIFT_PROTOCOL("_TtP7TalkSDK13CallTimerView_")
@protocol CallTimerView
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified titleLabel;
/// Label displaying call duration in seconds. Refreshed every second.
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified timerLabel;
@end


/// A view controller displayed for an ongoing call.
SWIFT_CLASS("_TtC7TalkSDK18CallViewController")
@interface CallViewController : UIViewController <CallScreen>
@property (nonatomic, readonly, strong) UIView <CallLoadingView> * _Nonnull callLoadingView;
@property (nonatomic, readonly, strong) UIView <CallErrorView> * _Nonnull callErrorView;
@property (nonatomic, readonly, strong) UIView <CallTimerView> * _Nonnull callTimerView;
@property (nonatomic, readonly, strong) UIView <CallButtonsView> * _Nonnull callButtonsView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)disconnect;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class AVRoutePickerView;

SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface CallViewController (SWIFT_EXTENSION(TalkSDK)) <AVRoutePickerViewDelegate>
- (void)routePickerViewWillBeginPresentingRoutes:(AVRoutePickerView * _Nonnull)routePickerView;
- (void)routePickerViewDidEndPresentingRoutes:(AVRoutePickerView * _Nonnull)routePickerView;
@end

enum RecordingConsent : NSInteger;

/// Comprehensive information about status of digital line.
SWIFT_PROTOCOL("_TtP7TalkSDK10LineStatus_")
@protocol LineStatus
/// Boolean flag which should be used to determine whether the “call us button” should be visible to end user.
/// Value <code>true</code> means that line is available to use. Value <code>false</code> means that the line is either disabled or no agent is available.
@property (nonatomic, readonly) BOOL agentAvailable;
/// Digital line’s current recording and recording consent configuration.
/// Using value of this property the end user may be allowed for opting-in or opting-out from call recording.
/// If the <em>recordingConsent</em> is <code>unknown</code> it means that end user does not need to opt-in or opt-out from call recording.
/// At the same time the <code>unknown</code> value does not provide any information whether the call will be recorded or not.
/// With the <code>unknown</code> value, all configuration is handled server side.
@property (nonatomic, readonly) enum RecordingConsent recordingConsent;
@end

@class UIColor;

/// Screen handling microphone permission configuration.
/// This screen checks and requests microphone permission. If there was no check before, it will show a system alert asking for permission. If there was a check and the microphone access was denied, it will show an alert asking user to turn on permission in Settings. If the microphone permission were already granted the screen is not presented.
/// important:
/// Please remember about adding <code>NSMicrophoneUsageDescription</code> into your app’s <code>Info.plist</code> file with description.
/// important:
/// You cannot change layout of elements. In case you need your own layout setup, use other SDK API methods and build your own <code>Recording Consent</code> view.
SWIFT_PROTOCOL("_TtP7TalkSDK26MicrophonePermissionScreen_")
@protocol MicrophonePermissionScreen
/// Background color of the screen container.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// Label which shows main title. Example: ‘Allow microphone’.
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified titleLabel;
/// Label which shows description message under the title label.
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified messageLabel;
/// Allow Button that opens an alert asking user about microphone permission. In case permission is already granted, calls <code>requestPermissionCompletion</code>.
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified allowButton;
/// Cancel Button which cancels all the flow and call <code>cancelHandler</code>.
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified cancelButton;
@end



/// Represents digital line’s recording consent configuration.
typedef SWIFT_ENUM(NSInteger, RecordingConsent, open) {
/// Call recording is disabled by default, but the end user has the option to opt-in
  RecordingConsentOptIn = 0,
/// Call recording is enabled by default, but the end user has the option to opt-out
  RecordingConsentOptOut = 1,
/// Call recording is not defined in Talk settings
  RecordingConsentUnknown = 2,
};

/// Represents the answer received from end user about recording the call.
typedef SWIFT_ENUM(NSInteger, RecordingConsentAnswer, open) {
/// Even if the default setting is not to record the call, end user opted in for recording the call.
  RecordingConsentAnswerOptedIn = 0,
/// Even if the default setting was to record the call, the end user opted-out from recording the call.
  RecordingConsentAnswerOptedOut = 1,
/// User did not provide answer about recording the call.
  RecordingConsentAnswerUnknown = 2,
};

@class UISwitch;

/// Screen handling recording consent.
/// The screen contains all UI elements of the view.
/// It is shown only when the <code>Recording Consent</code> received from <code>lineStatus</code> has a value of <code>optIn</code> or <code>optOut</code>. Otherwise no user’s answer is required and the screen is not presented.
/// This view has customizable font, text colors, background color, etc.
/// important:
/// You cannot change layout of elements. In case you need your own layout setup, use other SDK API methods and build your own <code>Recording Consent</code> view.
SWIFT_PROTOCOL("_TtP7TalkSDK22RecordingConsentScreen_")
@protocol RecordingConsentScreen
/// Background color of the screen container.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// Label which shows main title. Example: “Recording this call”.
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified titleLabel;
/// Label which shows description message under the title label.
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified messageLabel;
/// Button which calls <code>startCallHandler</code> handler.
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified startCallButton;
/// Cancel Button which cancels all the flow and calls <code>cancelHandler</code>.
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified cancelButton;
/// The view which contains consent <code>UISwitch</code> and description label.
@property (nonatomic, readonly, strong) UIView * _Null_unspecified consentSwitchView;
/// Switch which reflects user’s <code>RecordingConsentAnswer</code>. The <code>on</code> state equals to <code>.optIn</code>, and <code>off</code> state to <code>.optOut</code>.
@property (nonatomic, readonly, strong) UISwitch * _Null_unspecified consentSwitch;
/// Label which message regarding uiswitch. Example: “I agree to this call being recorder”.
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified consentDescriptionLabel;
/// Indicator which is shown when fetching digital line’s recording consent configuration.
@property (nonatomic, readonly, strong) UIActivityIndicatorView * _Null_unspecified activityIndicatorView;
@end





@class ZDKZendesk;

/// An entry point into Talk SDK for iOS.
SWIFT_CLASS_NAMED("Talk")
@interface ZDKTalk : NSObject
/// Initialize Talk with provided <code>Zendesk</code> configuration.
- (nonnull instancetype)initWithZendesk:(ZDKZendesk * _Nonnull)zendesk;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKTalk (SWIFT_EXTENSION(TalkSDK))
/// Returns Call Configuration view controller
/// Before making a call you need to make sure user has granted all required permissions. You can use this provided view controller for checking and asking for the permissions and validating all states.
/// important:
/// This view controller won’t start a call as its responsibility is only to handle required permissions. Please provide the handlers for implementing the navigation flow: <code>cancelHandler</code> for the view controller’s dismissal and <code>startCallHandler</code> for presenting the call view controller and starting a call.
/// \param digitalLine A nickname of a digital line for which the configuration will be displayed.
///
///
/// returns:
/// <code>CallConfigurationScreenViewController</code>, which is a <code>CallConfigurationScreen</code> conforming <code>UIViewController</code> with configured components and flow.
- (UIViewController <CallConfigurationScreen> * _Nonnull)makeCallConfigurationViewControllerFor:(NSString * _Nonnull)digitalLine SWIFT_WARN_UNUSED_RESULT;
@end



@protocol TalkCall;

@interface ZDKTalk (SWIFT_EXTENSION(TalkSDK))
/// Provides asynchronous information about status of line associated with <code>digitalLine</code> in Talk Settings.
/// For more information about line status, see the <code>LineStatus</code> documentation.
/// \param digitalLine name of digital line configured by the admin in Talk Settings
///
/// \param completion return <code>Result</code> with <code>LineStatus</code> for success status or <code>NSError</code> for fail.
///
- (void)lineStatusWithDigitalLine:(NSString * _Nonnull)digitalLine completion:(void (^ _Nonnull)(id <LineStatus> _Nullable, NSError * _Nullable))completion;
/// Initializes call with provided call data.
/// When call will be initialized or failed, handler will be called with proper result.
/// important:
///
/// You need to keep strong reference to returned <code>TalkCall</code> object, otherwise call will be disconnected and released from memory.
/// \param callData Details for the call which contain <code>digitalLine</code> and <code>recordingConsentAnswer</code>
///
/// \param statusChangeHandler will be called on every call status change
///
///
/// returns:
/// <code>TalkCall</code> object where user can change <code>DeviceOutput</code>, <code>mute</code> or <code>disconnect</code>.
- (id <TalkCall> _Nonnull)callWithCallData:(id <CallData> _Nonnull)callData statusChangeHandler:(void (^ _Nonnull)(enum CallStatus, NSError * _Nullable))statusChangeHandler SWIFT_WARN_UNUSED_RESULT;
/// Returns Call View Controller
/// Before showing that screen you may want to check <code>microphone permission</code>, <code>digital line</code> status, and <code>recording consent</code> first.
/// You can use this already prepared view controller, with all required logic for making calls.
/// \param callData Data which contains all required call details such as <code>DigitaLine</code> and <code>RecordingConsentAnswer</code>.
///
/// \param callDidFinishHandler Handler which will be called when the call is finished with CallScreen and CallSummary as parameters. Will be called for both success and failure scenarios.
///
///
/// returns:
/// <code>CallScreen</code> which is also <code>UIViewController</code> with all configured UI and logic for making calls.
- (UIViewController <CallScreen> * _Nonnull)makeCallViewControllerWith:(id <CallData> _Nonnull)callData callDidFinishHandler:(void (^ _Nonnull)(NSTimeInterval, NSError * _Nullable))callDidFinishHandler SWIFT_WARN_UNUSED_RESULT;
@end


@interface ZDKTalk (SWIFT_EXTENSION(TalkSDK))
/// Starts the call flow. All screens are presented modally.
/// If necessary, first configuration screen is presented where the user is asked to grant microphone access permission (if were not provided earlier) and call recording consent (if required). After appropriate permissions are granted the call screen is presented and the call with agent will be started.
/// \param digitalLine name of digital line configured by the admin in Talk Settings
///
- (void)startCallToDigitalLine:(NSString * _Nonnull)digitalLine;
@end


/// Represents a call created by Talk SDK.
/// Responsibility of this class is to provide set of basic operations related to the ongoing call, like muting, disconnecting or changing audio output type.
SWIFT_PROTOCOL("_TtP7TalkSDK8TalkCall_")
@protocol TalkCall
/// Property that defines if the call is muted.
/// Mutes or un-mutes the call depending on the value of <em>muted</em>.
/// Default value is <code>false</code>.
@property (nonatomic) BOOL muted;
/// Property that shows duration of call in seconds.
/// Default value is <code>0</code>. It will be <code>0</code> until the call is started.
@property (nonatomic, readonly) NSTimeInterval duration;
/// Ends the ongoing call.
/// If the call was not disconnected before - then the <code>TalkProvider.call.onStatusChange</code>  will be called with <code>CallStatus.disconnected</code>.
/// If the call was already disconnected - then the <code>TalkProvider.call.onStatusChange</code> will not be called.
- (void)disconnect;
/// Device specified audio output.
/// Default value is <code>AudioOutput.headset</code>.
@property (nonatomic) enum AudioOutput audioOutput;
/// Current audio routing for call’s audio input and output.
@property (nonatomic, strong) id <AudioRoutingOption> _Nullable audioRouting;
/// List of all currently available audio routing options provided by the device.
@property (nonatomic, readonly, copy) NSArray<id <AudioRoutingOption>> * _Nonnull availableAudioRoutingOptions;
@end


/// <code>CallData</code> conforming class that represents parameters required to make a call.
SWIFT_CLASS_NAMED("TalkCallData")
@interface ZDKTalkCallData : NSObject <CallData>
@property (nonatomic, readonly, copy) NSString * _Nonnull digitalLine;
@property (nonatomic, readonly) enum RecordingConsentAnswer recordingConsentAnswer;
- (nonnull instancetype)initWithDigitalLine:(NSString * _Nonnull)digitalLine recordingConsentAnswer:(enum RecordingConsentAnswer)recordingConsentAnswer OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents errors occuring for a <code>failed</code> or <code>disconnected</code> call.
typedef SWIFT_ENUM(NSInteger, TalkCallError, open) {
/// No digital line was found with a provided name.
  TalkCallErrorDigitalLineNotFound = 0,
/// Establishing the call failed because of network issues.
  TalkCallErrorNetworkError = 1,
/// The app is not authorized to make a call.
  TalkCallErrorUnauthorized = 2,
/// An unknown error occurred while establishing the call.
  TalkCallErrorUnknown = 3,
};
static NSString * _Nonnull const TalkCallErrorDomain = @"TalkSDK.TalkCallError";





















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#else
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import AVKit;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import TwilioVoice;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TalkSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



enum AudioRoutingType : NSInteger;

/// Describes possible options for routing call’s audio input and output.
SWIFT_PROTOCOL("_TtP7TalkSDK18AudioRoutingOption_")
@protocol AudioRoutingOption
/// Localized name of the routing option.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Type of audio routing option.
@property (nonatomic, readonly) enum AudioRoutingType type;
@end


@interface AVAudioSessionPortDescription (SWIFT_EXTENSION(TalkSDK)) <AudioRoutingOption>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) enum AudioRoutingType type;
@end

/// Describes possible options for audio playback during the call.
typedef SWIFT_ENUM(NSInteger, AudioOutput, open) {
/// The call audio will be routed through the speakers.
  AudioOutputSpeaker = 0,
/// The call audio will be routed through the headset.
  AudioOutputHeadset = 1,
};


/// Describes type of an audio routing option.
typedef SWIFT_ENUM(NSInteger, AudioRoutingType, open) {
/// Used for routing option using built-in speakers and microphone.
  AudioRoutingTypeBuiltIn = 0,
/// Used for routing option using bluetooth connectivity.
  AudioRoutingTypeBluetooth = 1,
};





@class UIButton;
@class UILabel;

/// Represent the bottom buttons view in call screen.
/// This view contains buttons for: mute, change audio source and hang up actions.
/// The view contains buttons and matching title labels.
/// important:
/// You cannot change layout of elements. In case you need your own layout setup, use other SDK API methods and build your own Call View.
/// note:
/// Labels with text under the buttons are not the part of the buttons.
SWIFT_PROTOCOL("_TtP7TalkSDK15CallButtonsView_")
@protocol CallButtonsView
/// Button for changing the ongoing call’s audio configuration. It operates differently depending on Bluetooth enabled headsets being connnected to the device:
/// <ul>
///   <li>
///     By default it toggles the audio output between <code>headset</code> and <code>speaker</code>.
///   </li>
///   <li>
///     When Bluetooth headset is available the button displays picker for changing the audio routing.
///   </li>
/// </ul>
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified speakerButton;
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified speakerTitleLabel;
/// Button for disconnecting the call.
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified hangUpButton;
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified hangUpTitleLabel;
/// Button for muting/unmuting the microphone.
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified muteButton;
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified muteTitleLabel;
@end

@protocol MicrophonePermissionScreen;
@protocol RecordingConsentScreen;
enum RecordingConsentAnswer : NSInteger;

/// A screen presented before making a call, used to ask the user about necessary permissions that need to be granted.
/// This screen internally manages all required checks: microphone permission access, digital line recording consent configuration etc., and presents the appropriate UI:
/// <code>Microphone screen</code> view is presented if microphone permission is not granted
/// <code>Recording Consent Screen</code> view is presented only if <code>Recording Consent</code> configuration for the provided <code>Digital Line</code> is set to <code>optIn</code> or <code>optOut</code>. If during fetching of the configuration error occurs, the <code>Error View</code> will be shown.
/// important:
/// For better user experience before showing the <code>Call Configuration Screen</code> you may want to check for agents availability by calling a <code>Talk</code> object method:
/// \code
/// func lineStatus(digitalLine: DigitalLine, completion: @escaping (LineStatusResult) -> Void)
///
/// \endcodeThis screen will not be dismissed automatically. You need to provide the functionality on <code>cancelHandler</code> and <code>startCallHandler</code> handlers.
SWIFT_PROTOCOL("_TtP7TalkSDK23CallConfigurationScreen_")
@protocol CallConfigurationScreen
/// Container for UI elements shown as Microphone permission screen. Enables customization of UI controls such as font, text colors, etc.
@property (nonatomic, readonly, strong) id <MicrophonePermissionScreen> _Nonnull microphoneScreen;
/// Container for UI elements shown as Recording Consent screen. Enables customization of UI controls such as font, text colors, etc.
@property (nonatomic, readonly, strong) id <RecordingConsentScreen> _Nonnull recordingConsentScreen;
/// Handler that is called when end user cancels the configuration at any time.
@property (nonatomic, copy) void (^ _Nullable cancelHandler)(void);
/// Handler called after completing the configuration, it will be called with user’s <code>RecordingConsentAnswer</code>.
@property (nonatomic, copy) void (^ _Nullable startCallHandler)(enum RecordingConsentAnswer);
@end

@class NSCoder;

/// A view controller that is displayed before making a call, used to ask the user about necessary permissions that need to be granted.
SWIFT_CLASS("_TtC7TalkSDK31CallConfigurationViewController")
@interface CallConfigurationViewController : UIViewController <CallConfigurationScreen>
@property (nonatomic, readonly, strong) id <MicrophonePermissionScreen> _Nonnull microphoneScreen;
@property (nonatomic, readonly, strong) id <RecordingConsentScreen> _Nonnull recordingConsentScreen;
@property (nonatomic, copy) void (^ _Nullable cancelHandler)(void);
@property (nonatomic, copy) void (^ _Nullable startCallHandler)(enum RecordingConsentAnswer);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// Represents all required parameters to make a call.
SWIFT_PROTOCOL("_TtP7TalkSDK8CallData_")
@protocol CallData
/// Name of digital line configured by the admin in Talk Settings.
@property (nonatomic, readonly, copy) NSString * _Nonnull digitalLine;
/// Answer received from end user about recording the call.
@property (nonatomic, readonly) enum RecordingConsentAnswer recordingConsentAnswer;
@end


/// Represent the error view with <code>retry</code> and <code>cancel</code> buttons.
/// <code>CallErrorView</code> is visible when starting a call has failed. The screen will is shown full screen.
/// On that screen you can change fonts, text colors, background colors, etc.
/// important:
/// You cannot change layout of elements. In case you need your own layout setup, use other SDK API methods and build your own Call View.
SWIFT_PROTOCOL("_TtP7TalkSDK13CallErrorView_")
@protocol CallErrorView
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified titleLabel;
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified messageLabel;
/// Retry button. When user will tap it call will try to reconnect.
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified retryButton;
/// Cancel button. Tapping will close the Call Screen.
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified cancelButton;
@end

@class UIActivityIndicatorView;

/// Represent the loading view with activity indicator on the call screen.
/// When starting a call the SDK needs to prepare the call configuration.
/// At this time on the <code>CallScreen</code> an activity indicator with a title is shown.
/// This view has customizable font, text colors, background color, etc.
/// important:
/// You cannot change layout of elements. In case you need your own layout setup, use other SDK API methods and build your own Call View.
SWIFT_PROTOCOL("_TtP7TalkSDK15CallLoadingView_")
@protocol CallLoadingView
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified titleLabel;
@property (nonatomic, readonly, strong) UIActivityIndicatorView * _Null_unspecified activityIndicator;
@end

@class UIView;
@protocol CallTimerView;

/// A screen presented for an ongoing call.
/// This screen is shown during the all states of call (<code>starting</code>, <code>in progress</code>, <code>fail</code>, etc).
/// It contains various sub-views related to displaying info depending on call state.
/// note:
/// Labels with text under the buttons are not the part of button.
SWIFT_PROTOCOL("_TtP7TalkSDK10CallScreen_")
@protocol CallScreen
/// Loading view with activity indicator.
@property (nonatomic, readonly, strong) UIView <CallLoadingView> * _Nonnull callLoadingView;
/// Error view with retry and cancel buttons.
@property (nonatomic, readonly, strong) UIView <CallErrorView> * _Nonnull callErrorView;
/// Timer view displaying call duration.
@property (nonatomic, readonly, strong) UIView <CallTimerView> * _Nonnull callTimerView;
/// View containing call screen action buttons.
@property (nonatomic, readonly, strong) UIView <CallButtonsView> * _Nonnull callButtonsView;
/// Disconnects the call.
/// It is possible to manually disconnect the call from every state of the call. After disconnecting, the <code>callDidFinishHandler</code> is called.
- (void)disconnect;
@end

/// Represents all possible states of the call.
typedef SWIFT_ENUM(NSInteger, CallStatus, open) {
/// The call is connecting.
  CallStatusConnecting = 0,
/// The call has been connected.
  CallStatusConnected = 1,
/// The call has disconnected.
  CallStatusDisconnected = 2,
/// The call has been disconnected.
  CallStatusFailed = 3,
/// The call starts to reconnect.
  CallStatusReconnecting = 4,
/// The call has reconnected.
  CallStatusReconnected = 5,
};


/// Represent the timer view with a label showing call’s duration.
/// The view is shown when a call is in progress with the title <code>Call in progress</code> and an automatically updated timer label showing call’s duration in seconds.
/// On that screen you can change the font, text colors, background color, etc.
/// important:
/// You cannot change layout of elements. In case you need your own layout setup, use other SDK API methods and build your own Call View.
SWIFT_PROTOCOL("_TtP7TalkSDK13CallTimerView_")
@protocol CallTimerView
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified titleLabel;
/// Label displaying call duration in seconds. Refreshed every second.
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified timerLabel;
@end


/// A view controller displayed for an ongoing call.
SWIFT_CLASS("_TtC7TalkSDK18CallViewController")
@interface CallViewController : UIViewController <CallScreen>
@property (nonatomic, readonly, strong) UIView <CallLoadingView> * _Nonnull callLoadingView;
@property (nonatomic, readonly, strong) UIView <CallErrorView> * _Nonnull callErrorView;
@property (nonatomic, readonly, strong) UIView <CallTimerView> * _Nonnull callTimerView;
@property (nonatomic, readonly, strong) UIView <CallButtonsView> * _Nonnull callButtonsView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)disconnect;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class AVRoutePickerView;

SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface CallViewController (SWIFT_EXTENSION(TalkSDK)) <AVRoutePickerViewDelegate>
- (void)routePickerViewWillBeginPresentingRoutes:(AVRoutePickerView * _Nonnull)routePickerView;
- (void)routePickerViewDidEndPresentingRoutes:(AVRoutePickerView * _Nonnull)routePickerView;
@end

enum RecordingConsent : NSInteger;

/// Comprehensive information about status of digital line.
SWIFT_PROTOCOL("_TtP7TalkSDK10LineStatus_")
@protocol LineStatus
/// Boolean flag which should be used to determine whether the “call us button” should be visible to end user.
/// Value <code>true</code> means that line is available to use. Value <code>false</code> means that the line is either disabled or no agent is available.
@property (nonatomic, readonly) BOOL agentAvailable;
/// Digital line’s current recording and recording consent configuration.
/// Using value of this property the end user may be allowed for opting-in or opting-out from call recording.
/// If the <em>recordingConsent</em> is <code>unknown</code> it means that end user does not need to opt-in or opt-out from call recording.
/// At the same time the <code>unknown</code> value does not provide any information whether the call will be recorded or not.
/// With the <code>unknown</code> value, all configuration is handled server side.
@property (nonatomic, readonly) enum RecordingConsent recordingConsent;
@end

@class UIColor;

/// Screen handling microphone permission configuration.
/// This screen checks and requests microphone permission. If there was no check before, it will show a system alert asking for permission. If there was a check and the microphone access was denied, it will show an alert asking user to turn on permission in Settings. If the microphone permission were already granted the screen is not presented.
/// important:
/// Please remember about adding <code>NSMicrophoneUsageDescription</code> into your app’s <code>Info.plist</code> file with description.
/// important:
/// You cannot change layout of elements. In case you need your own layout setup, use other SDK API methods and build your own <code>Recording Consent</code> view.
SWIFT_PROTOCOL("_TtP7TalkSDK26MicrophonePermissionScreen_")
@protocol MicrophonePermissionScreen
/// Background color of the screen container.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// Label which shows main title. Example: ‘Allow microphone’.
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified titleLabel;
/// Label which shows description message under the title label.
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified messageLabel;
/// Allow Button that opens an alert asking user about microphone permission. In case permission is already granted, calls <code>requestPermissionCompletion</code>.
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified allowButton;
/// Cancel Button which cancels all the flow and call <code>cancelHandler</code>.
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified cancelButton;
@end



/// Represents digital line’s recording consent configuration.
typedef SWIFT_ENUM(NSInteger, RecordingConsent, open) {
/// Call recording is disabled by default, but the end user has the option to opt-in
  RecordingConsentOptIn = 0,
/// Call recording is enabled by default, but the end user has the option to opt-out
  RecordingConsentOptOut = 1,
/// Call recording is not defined in Talk settings
  RecordingConsentUnknown = 2,
};

/// Represents the answer received from end user about recording the call.
typedef SWIFT_ENUM(NSInteger, RecordingConsentAnswer, open) {
/// Even if the default setting is not to record the call, end user opted in for recording the call.
  RecordingConsentAnswerOptedIn = 0,
/// Even if the default setting was to record the call, the end user opted-out from recording the call.
  RecordingConsentAnswerOptedOut = 1,
/// User did not provide answer about recording the call.
  RecordingConsentAnswerUnknown = 2,
};

@class UISwitch;

/// Screen handling recording consent.
/// The screen contains all UI elements of the view.
/// It is shown only when the <code>Recording Consent</code> received from <code>lineStatus</code> has a value of <code>optIn</code> or <code>optOut</code>. Otherwise no user’s answer is required and the screen is not presented.
/// This view has customizable font, text colors, background color, etc.
/// important:
/// You cannot change layout of elements. In case you need your own layout setup, use other SDK API methods and build your own <code>Recording Consent</code> view.
SWIFT_PROTOCOL("_TtP7TalkSDK22RecordingConsentScreen_")
@protocol RecordingConsentScreen
/// Background color of the screen container.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// Label which shows main title. Example: “Recording this call”.
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified titleLabel;
/// Label which shows description message under the title label.
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified messageLabel;
/// Button which calls <code>startCallHandler</code> handler.
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified startCallButton;
/// Cancel Button which cancels all the flow and calls <code>cancelHandler</code>.
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified cancelButton;
/// The view which contains consent <code>UISwitch</code> and description label.
@property (nonatomic, readonly, strong) UIView * _Null_unspecified consentSwitchView;
/// Switch which reflects user’s <code>RecordingConsentAnswer</code>. The <code>on</code> state equals to <code>.optIn</code>, and <code>off</code> state to <code>.optOut</code>.
@property (nonatomic, readonly, strong) UISwitch * _Null_unspecified consentSwitch;
/// Label which message regarding uiswitch. Example: “I agree to this call being recorder”.
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified consentDescriptionLabel;
/// Indicator which is shown when fetching digital line’s recording consent configuration.
@property (nonatomic, readonly, strong) UIActivityIndicatorView * _Null_unspecified activityIndicatorView;
@end





@class ZDKZendesk;

/// An entry point into Talk SDK for iOS.
SWIFT_CLASS_NAMED("Talk")
@interface ZDKTalk : NSObject
/// Initialize Talk with provided <code>Zendesk</code> configuration.
- (nonnull instancetype)initWithZendesk:(ZDKZendesk * _Nonnull)zendesk;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKTalk (SWIFT_EXTENSION(TalkSDK))
/// Returns Call Configuration view controller
/// Before making a call you need to make sure user has granted all required permissions. You can use this provided view controller for checking and asking for the permissions and validating all states.
/// important:
/// This view controller won’t start a call as its responsibility is only to handle required permissions. Please provide the handlers for implementing the navigation flow: <code>cancelHandler</code> for the view controller’s dismissal and <code>startCallHandler</code> for presenting the call view controller and starting a call.
/// \param digitalLine A nickname of a digital line for which the configuration will be displayed.
///
///
/// returns:
/// <code>CallConfigurationScreenViewController</code>, which is a <code>CallConfigurationScreen</code> conforming <code>UIViewController</code> with configured components and flow.
- (UIViewController <CallConfigurationScreen> * _Nonnull)makeCallConfigurationViewControllerFor:(NSString * _Nonnull)digitalLine SWIFT_WARN_UNUSED_RESULT;
@end



@protocol TalkCall;

@interface ZDKTalk (SWIFT_EXTENSION(TalkSDK))
/// Provides asynchronous information about status of line associated with <code>digitalLine</code> in Talk Settings.
/// For more information about line status, see the <code>LineStatus</code> documentation.
/// \param digitalLine name of digital line configured by the admin in Talk Settings
///
/// \param completion return <code>Result</code> with <code>LineStatus</code> for success status or <code>NSError</code> for fail.
///
- (void)lineStatusWithDigitalLine:(NSString * _Nonnull)digitalLine completion:(void (^ _Nonnull)(id <LineStatus> _Nullable, NSError * _Nullable))completion;
/// Initializes call with provided call data.
/// When call will be initialized or failed, handler will be called with proper result.
/// important:
///
/// You need to keep strong reference to returned <code>TalkCall</code> object, otherwise call will be disconnected and released from memory.
/// \param callData Details for the call which contain <code>digitalLine</code> and <code>recordingConsentAnswer</code>
///
/// \param statusChangeHandler will be called on every call status change
///
///
/// returns:
/// <code>TalkCall</code> object where user can change <code>DeviceOutput</code>, <code>mute</code> or <code>disconnect</code>.
- (id <TalkCall> _Nonnull)callWithCallData:(id <CallData> _Nonnull)callData statusChangeHandler:(void (^ _Nonnull)(enum CallStatus, NSError * _Nullable))statusChangeHandler SWIFT_WARN_UNUSED_RESULT;
/// Returns Call View Controller
/// Before showing that screen you may want to check <code>microphone permission</code>, <code>digital line</code> status, and <code>recording consent</code> first.
/// You can use this already prepared view controller, with all required logic for making calls.
/// \param callData Data which contains all required call details such as <code>DigitaLine</code> and <code>RecordingConsentAnswer</code>.
///
/// \param callDidFinishHandler Handler which will be called when the call is finished with CallScreen and CallSummary as parameters. Will be called for both success and failure scenarios.
///
///
/// returns:
/// <code>CallScreen</code> which is also <code>UIViewController</code> with all configured UI and logic for making calls.
- (UIViewController <CallScreen> * _Nonnull)makeCallViewControllerWith:(id <CallData> _Nonnull)callData callDidFinishHandler:(void (^ _Nonnull)(NSTimeInterval, NSError * _Nullable))callDidFinishHandler SWIFT_WARN_UNUSED_RESULT;
@end


@interface ZDKTalk (SWIFT_EXTENSION(TalkSDK))
/// Starts the call flow. All screens are presented modally.
/// If necessary, first configuration screen is presented where the user is asked to grant microphone access permission (if were not provided earlier) and call recording consent (if required). After appropriate permissions are granted the call screen is presented and the call with agent will be started.
/// \param digitalLine name of digital line configured by the admin in Talk Settings
///
- (void)startCallToDigitalLine:(NSString * _Nonnull)digitalLine;
@end


/// Represents a call created by Talk SDK.
/// Responsibility of this class is to provide set of basic operations related to the ongoing call, like muting, disconnecting or changing audio output type.
SWIFT_PROTOCOL("_TtP7TalkSDK8TalkCall_")
@protocol TalkCall
/// Property that defines if the call is muted.
/// Mutes or un-mutes the call depending on the value of <em>muted</em>.
/// Default value is <code>false</code>.
@property (nonatomic) BOOL muted;
/// Property that shows duration of call in seconds.
/// Default value is <code>0</code>. It will be <code>0</code> until the call is started.
@property (nonatomic, readonly) NSTimeInterval duration;
/// Ends the ongoing call.
/// If the call was not disconnected before - then the <code>TalkProvider.call.onStatusChange</code>  will be called with <code>CallStatus.disconnected</code>.
/// If the call was already disconnected - then the <code>TalkProvider.call.onStatusChange</code> will not be called.
- (void)disconnect;
/// Device specified audio output.
/// Default value is <code>AudioOutput.headset</code>.
@property (nonatomic) enum AudioOutput audioOutput;
/// Current audio routing for call’s audio input and output.
@property (nonatomic, strong) id <AudioRoutingOption> _Nullable audioRouting;
/// List of all currently available audio routing options provided by the device.
@property (nonatomic, readonly, copy) NSArray<id <AudioRoutingOption>> * _Nonnull availableAudioRoutingOptions;
@end


/// <code>CallData</code> conforming class that represents parameters required to make a call.
SWIFT_CLASS_NAMED("TalkCallData")
@interface ZDKTalkCallData : NSObject <CallData>
@property (nonatomic, readonly, copy) NSString * _Nonnull digitalLine;
@property (nonatomic, readonly) enum RecordingConsentAnswer recordingConsentAnswer;
- (nonnull instancetype)initWithDigitalLine:(NSString * _Nonnull)digitalLine recordingConsentAnswer:(enum RecordingConsentAnswer)recordingConsentAnswer OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents errors occuring for a <code>failed</code> or <code>disconnected</code> call.
typedef SWIFT_ENUM(NSInteger, TalkCallError, open) {
/// No digital line was found with a provided name.
  TalkCallErrorDigitalLineNotFound = 0,
/// Establishing the call failed because of network issues.
  TalkCallErrorNetworkError = 1,
/// The app is not authorized to make a call.
  TalkCallErrorUnauthorized = 2,
/// An unknown error occurred while establishing the call.
  TalkCallErrorUnknown = 3,
};
static NSString * _Nonnull const TalkCallErrorDomain = @"TalkSDK.TalkCallError";





















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import AVKit;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import TwilioVoice;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TalkSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



enum AudioRoutingType : NSInteger;

/// Describes possible options for routing call’s audio input and output.
SWIFT_PROTOCOL("_TtP7TalkSDK18AudioRoutingOption_")
@protocol AudioRoutingOption
/// Localized name of the routing option.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Type of audio routing option.
@property (nonatomic, readonly) enum AudioRoutingType type;
@end


@interface AVAudioSessionPortDescription (SWIFT_EXTENSION(TalkSDK)) <AudioRoutingOption>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) enum AudioRoutingType type;
@end

/// Describes possible options for audio playback during the call.
typedef SWIFT_ENUM(NSInteger, AudioOutput, open) {
/// The call audio will be routed through the speakers.
  AudioOutputSpeaker = 0,
/// The call audio will be routed through the headset.
  AudioOutputHeadset = 1,
};


/// Describes type of an audio routing option.
typedef SWIFT_ENUM(NSInteger, AudioRoutingType, open) {
/// Used for routing option using built-in speakers and microphone.
  AudioRoutingTypeBuiltIn = 0,
/// Used for routing option using bluetooth connectivity.
  AudioRoutingTypeBluetooth = 1,
};





@class UIButton;
@class UILabel;

/// Represent the bottom buttons view in call screen.
/// This view contains buttons for: mute, change audio source and hang up actions.
/// The view contains buttons and matching title labels.
/// important:
/// You cannot change layout of elements. In case you need your own layout setup, use other SDK API methods and build your own Call View.
/// note:
/// Labels with text under the buttons are not the part of the buttons.
SWIFT_PROTOCOL("_TtP7TalkSDK15CallButtonsView_")
@protocol CallButtonsView
/// Button for changing the ongoing call’s audio configuration. It operates differently depending on Bluetooth enabled headsets being connnected to the device:
/// <ul>
///   <li>
///     By default it toggles the audio output between <code>headset</code> and <code>speaker</code>.
///   </li>
///   <li>
///     When Bluetooth headset is available the button displays picker for changing the audio routing.
///   </li>
/// </ul>
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified speakerButton;
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified speakerTitleLabel;
/// Button for disconnecting the call.
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified hangUpButton;
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified hangUpTitleLabel;
/// Button for muting/unmuting the microphone.
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified muteButton;
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified muteTitleLabel;
@end

@protocol MicrophonePermissionScreen;
@protocol RecordingConsentScreen;
enum RecordingConsentAnswer : NSInteger;

/// A screen presented before making a call, used to ask the user about necessary permissions that need to be granted.
/// This screen internally manages all required checks: microphone permission access, digital line recording consent configuration etc., and presents the appropriate UI:
/// <code>Microphone screen</code> view is presented if microphone permission is not granted
/// <code>Recording Consent Screen</code> view is presented only if <code>Recording Consent</code> configuration for the provided <code>Digital Line</code> is set to <code>optIn</code> or <code>optOut</code>. If during fetching of the configuration error occurs, the <code>Error View</code> will be shown.
/// important:
/// For better user experience before showing the <code>Call Configuration Screen</code> you may want to check for agents availability by calling a <code>Talk</code> object method:
/// \code
/// func lineStatus(digitalLine: DigitalLine, completion: @escaping (LineStatusResult) -> Void)
///
/// \endcodeThis screen will not be dismissed automatically. You need to provide the functionality on <code>cancelHandler</code> and <code>startCallHandler</code> handlers.
SWIFT_PROTOCOL("_TtP7TalkSDK23CallConfigurationScreen_")
@protocol CallConfigurationScreen
/// Container for UI elements shown as Microphone permission screen. Enables customization of UI controls such as font, text colors, etc.
@property (nonatomic, readonly, strong) id <MicrophonePermissionScreen> _Nonnull microphoneScreen;
/// Container for UI elements shown as Recording Consent screen. Enables customization of UI controls such as font, text colors, etc.
@property (nonatomic, readonly, strong) id <RecordingConsentScreen> _Nonnull recordingConsentScreen;
/// Handler that is called when end user cancels the configuration at any time.
@property (nonatomic, copy) void (^ _Nullable cancelHandler)(void);
/// Handler called after completing the configuration, it will be called with user’s <code>RecordingConsentAnswer</code>.
@property (nonatomic, copy) void (^ _Nullable startCallHandler)(enum RecordingConsentAnswer);
@end

@class NSCoder;

/// A view controller that is displayed before making a call, used to ask the user about necessary permissions that need to be granted.
SWIFT_CLASS("_TtC7TalkSDK31CallConfigurationViewController")
@interface CallConfigurationViewController : UIViewController <CallConfigurationScreen>
@property (nonatomic, readonly, strong) id <MicrophonePermissionScreen> _Nonnull microphoneScreen;
@property (nonatomic, readonly, strong) id <RecordingConsentScreen> _Nonnull recordingConsentScreen;
@property (nonatomic, copy) void (^ _Nullable cancelHandler)(void);
@property (nonatomic, copy) void (^ _Nullable startCallHandler)(enum RecordingConsentAnswer);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// Represents all required parameters to make a call.
SWIFT_PROTOCOL("_TtP7TalkSDK8CallData_")
@protocol CallData
/// Name of digital line configured by the admin in Talk Settings.
@property (nonatomic, readonly, copy) NSString * _Nonnull digitalLine;
/// Answer received from end user about recording the call.
@property (nonatomic, readonly) enum RecordingConsentAnswer recordingConsentAnswer;
@end


/// Represent the error view with <code>retry</code> and <code>cancel</code> buttons.
/// <code>CallErrorView</code> is visible when starting a call has failed. The screen will is shown full screen.
/// On that screen you can change fonts, text colors, background colors, etc.
/// important:
/// You cannot change layout of elements. In case you need your own layout setup, use other SDK API methods and build your own Call View.
SWIFT_PROTOCOL("_TtP7TalkSDK13CallErrorView_")
@protocol CallErrorView
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified titleLabel;
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified messageLabel;
/// Retry button. When user will tap it call will try to reconnect.
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified retryButton;
/// Cancel button. Tapping will close the Call Screen.
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified cancelButton;
@end

@class UIActivityIndicatorView;

/// Represent the loading view with activity indicator on the call screen.
/// When starting a call the SDK needs to prepare the call configuration.
/// At this time on the <code>CallScreen</code> an activity indicator with a title is shown.
/// This view has customizable font, text colors, background color, etc.
/// important:
/// You cannot change layout of elements. In case you need your own layout setup, use other SDK API methods and build your own Call View.
SWIFT_PROTOCOL("_TtP7TalkSDK15CallLoadingView_")
@protocol CallLoadingView
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified titleLabel;
@property (nonatomic, readonly, strong) UIActivityIndicatorView * _Null_unspecified activityIndicator;
@end

@class UIView;
@protocol CallTimerView;

/// A screen presented for an ongoing call.
/// This screen is shown during the all states of call (<code>starting</code>, <code>in progress</code>, <code>fail</code>, etc).
/// It contains various sub-views related to displaying info depending on call state.
/// note:
/// Labels with text under the buttons are not the part of button.
SWIFT_PROTOCOL("_TtP7TalkSDK10CallScreen_")
@protocol CallScreen
/// Loading view with activity indicator.
@property (nonatomic, readonly, strong) UIView <CallLoadingView> * _Nonnull callLoadingView;
/// Error view with retry and cancel buttons.
@property (nonatomic, readonly, strong) UIView <CallErrorView> * _Nonnull callErrorView;
/// Timer view displaying call duration.
@property (nonatomic, readonly, strong) UIView <CallTimerView> * _Nonnull callTimerView;
/// View containing call screen action buttons.
@property (nonatomic, readonly, strong) UIView <CallButtonsView> * _Nonnull callButtonsView;
/// Disconnects the call.
/// It is possible to manually disconnect the call from every state of the call. After disconnecting, the <code>callDidFinishHandler</code> is called.
- (void)disconnect;
@end

/// Represents all possible states of the call.
typedef SWIFT_ENUM(NSInteger, CallStatus, open) {
/// The call is connecting.
  CallStatusConnecting = 0,
/// The call has been connected.
  CallStatusConnected = 1,
/// The call has disconnected.
  CallStatusDisconnected = 2,
/// The call has been disconnected.
  CallStatusFailed = 3,
/// The call starts to reconnect.
  CallStatusReconnecting = 4,
/// The call has reconnected.
  CallStatusReconnected = 5,
};


/// Represent the timer view with a label showing call’s duration.
/// The view is shown when a call is in progress with the title <code>Call in progress</code> and an automatically updated timer label showing call’s duration in seconds.
/// On that screen you can change the font, text colors, background color, etc.
/// important:
/// You cannot change layout of elements. In case you need your own layout setup, use other SDK API methods and build your own Call View.
SWIFT_PROTOCOL("_TtP7TalkSDK13CallTimerView_")
@protocol CallTimerView
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified titleLabel;
/// Label displaying call duration in seconds. Refreshed every second.
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified timerLabel;
@end


/// A view controller displayed for an ongoing call.
SWIFT_CLASS("_TtC7TalkSDK18CallViewController")
@interface CallViewController : UIViewController <CallScreen>
@property (nonatomic, readonly, strong) UIView <CallLoadingView> * _Nonnull callLoadingView;
@property (nonatomic, readonly, strong) UIView <CallErrorView> * _Nonnull callErrorView;
@property (nonatomic, readonly, strong) UIView <CallTimerView> * _Nonnull callTimerView;
@property (nonatomic, readonly, strong) UIView <CallButtonsView> * _Nonnull callButtonsView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)disconnect;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class AVRoutePickerView;

SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface CallViewController (SWIFT_EXTENSION(TalkSDK)) <AVRoutePickerViewDelegate>
- (void)routePickerViewWillBeginPresentingRoutes:(AVRoutePickerView * _Nonnull)routePickerView;
- (void)routePickerViewDidEndPresentingRoutes:(AVRoutePickerView * _Nonnull)routePickerView;
@end

enum RecordingConsent : NSInteger;

/// Comprehensive information about status of digital line.
SWIFT_PROTOCOL("_TtP7TalkSDK10LineStatus_")
@protocol LineStatus
/// Boolean flag which should be used to determine whether the “call us button” should be visible to end user.
/// Value <code>true</code> means that line is available to use. Value <code>false</code> means that the line is either disabled or no agent is available.
@property (nonatomic, readonly) BOOL agentAvailable;
/// Digital line’s current recording and recording consent configuration.
/// Using value of this property the end user may be allowed for opting-in or opting-out from call recording.
/// If the <em>recordingConsent</em> is <code>unknown</code> it means that end user does not need to opt-in or opt-out from call recording.
/// At the same time the <code>unknown</code> value does not provide any information whether the call will be recorded or not.
/// With the <code>unknown</code> value, all configuration is handled server side.
@property (nonatomic, readonly) enum RecordingConsent recordingConsent;
@end

@class UIColor;

/// Screen handling microphone permission configuration.
/// This screen checks and requests microphone permission. If there was no check before, it will show a system alert asking for permission. If there was a check and the microphone access was denied, it will show an alert asking user to turn on permission in Settings. If the microphone permission were already granted the screen is not presented.
/// important:
/// Please remember about adding <code>NSMicrophoneUsageDescription</code> into your app’s <code>Info.plist</code> file with description.
/// important:
/// You cannot change layout of elements. In case you need your own layout setup, use other SDK API methods and build your own <code>Recording Consent</code> view.
SWIFT_PROTOCOL("_TtP7TalkSDK26MicrophonePermissionScreen_")
@protocol MicrophonePermissionScreen
/// Background color of the screen container.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// Label which shows main title. Example: ‘Allow microphone’.
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified titleLabel;
/// Label which shows description message under the title label.
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified messageLabel;
/// Allow Button that opens an alert asking user about microphone permission. In case permission is already granted, calls <code>requestPermissionCompletion</code>.
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified allowButton;
/// Cancel Button which cancels all the flow and call <code>cancelHandler</code>.
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified cancelButton;
@end



/// Represents digital line’s recording consent configuration.
typedef SWIFT_ENUM(NSInteger, RecordingConsent, open) {
/// Call recording is disabled by default, but the end user has the option to opt-in
  RecordingConsentOptIn = 0,
/// Call recording is enabled by default, but the end user has the option to opt-out
  RecordingConsentOptOut = 1,
/// Call recording is not defined in Talk settings
  RecordingConsentUnknown = 2,
};

/// Represents the answer received from end user about recording the call.
typedef SWIFT_ENUM(NSInteger, RecordingConsentAnswer, open) {
/// Even if the default setting is not to record the call, end user opted in for recording the call.
  RecordingConsentAnswerOptedIn = 0,
/// Even if the default setting was to record the call, the end user opted-out from recording the call.
  RecordingConsentAnswerOptedOut = 1,
/// User did not provide answer about recording the call.
  RecordingConsentAnswerUnknown = 2,
};

@class UISwitch;

/// Screen handling recording consent.
/// The screen contains all UI elements of the view.
/// It is shown only when the <code>Recording Consent</code> received from <code>lineStatus</code> has a value of <code>optIn</code> or <code>optOut</code>. Otherwise no user’s answer is required and the screen is not presented.
/// This view has customizable font, text colors, background color, etc.
/// important:
/// You cannot change layout of elements. In case you need your own layout setup, use other SDK API methods and build your own <code>Recording Consent</code> view.
SWIFT_PROTOCOL("_TtP7TalkSDK22RecordingConsentScreen_")
@protocol RecordingConsentScreen
/// Background color of the screen container.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// Label which shows main title. Example: “Recording this call”.
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified titleLabel;
/// Label which shows description message under the title label.
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified messageLabel;
/// Button which calls <code>startCallHandler</code> handler.
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified startCallButton;
/// Cancel Button which cancels all the flow and calls <code>cancelHandler</code>.
@property (nonatomic, readonly, strong) UIButton * _Null_unspecified cancelButton;
/// The view which contains consent <code>UISwitch</code> and description label.
@property (nonatomic, readonly, strong) UIView * _Null_unspecified consentSwitchView;
/// Switch which reflects user’s <code>RecordingConsentAnswer</code>. The <code>on</code> state equals to <code>.optIn</code>, and <code>off</code> state to <code>.optOut</code>.
@property (nonatomic, readonly, strong) UISwitch * _Null_unspecified consentSwitch;
/// Label which message regarding uiswitch. Example: “I agree to this call being recorder”.
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified consentDescriptionLabel;
/// Indicator which is shown when fetching digital line’s recording consent configuration.
@property (nonatomic, readonly, strong) UIActivityIndicatorView * _Null_unspecified activityIndicatorView;
@end





@class ZDKZendesk;

/// An entry point into Talk SDK for iOS.
SWIFT_CLASS_NAMED("Talk")
@interface ZDKTalk : NSObject
/// Initialize Talk with provided <code>Zendesk</code> configuration.
- (nonnull instancetype)initWithZendesk:(ZDKZendesk * _Nonnull)zendesk;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface ZDKTalk (SWIFT_EXTENSION(TalkSDK))
/// Returns Call Configuration view controller
/// Before making a call you need to make sure user has granted all required permissions. You can use this provided view controller for checking and asking for the permissions and validating all states.
/// important:
/// This view controller won’t start a call as its responsibility is only to handle required permissions. Please provide the handlers for implementing the navigation flow: <code>cancelHandler</code> for the view controller’s dismissal and <code>startCallHandler</code> for presenting the call view controller and starting a call.
/// \param digitalLine A nickname of a digital line for which the configuration will be displayed.
///
///
/// returns:
/// <code>CallConfigurationScreenViewController</code>, which is a <code>CallConfigurationScreen</code> conforming <code>UIViewController</code> with configured components and flow.
- (UIViewController <CallConfigurationScreen> * _Nonnull)makeCallConfigurationViewControllerFor:(NSString * _Nonnull)digitalLine SWIFT_WARN_UNUSED_RESULT;
@end



@protocol TalkCall;

@interface ZDKTalk (SWIFT_EXTENSION(TalkSDK))
/// Provides asynchronous information about status of line associated with <code>digitalLine</code> in Talk Settings.
/// For more information about line status, see the <code>LineStatus</code> documentation.
/// \param digitalLine name of digital line configured by the admin in Talk Settings
///
/// \param completion return <code>Result</code> with <code>LineStatus</code> for success status or <code>NSError</code> for fail.
///
- (void)lineStatusWithDigitalLine:(NSString * _Nonnull)digitalLine completion:(void (^ _Nonnull)(id <LineStatus> _Nullable, NSError * _Nullable))completion;
/// Initializes call with provided call data.
/// When call will be initialized or failed, handler will be called with proper result.
/// important:
///
/// You need to keep strong reference to returned <code>TalkCall</code> object, otherwise call will be disconnected and released from memory.
/// \param callData Details for the call which contain <code>digitalLine</code> and <code>recordingConsentAnswer</code>
///
/// \param statusChangeHandler will be called on every call status change
///
///
/// returns:
/// <code>TalkCall</code> object where user can change <code>DeviceOutput</code>, <code>mute</code> or <code>disconnect</code>.
- (id <TalkCall> _Nonnull)callWithCallData:(id <CallData> _Nonnull)callData statusChangeHandler:(void (^ _Nonnull)(enum CallStatus, NSError * _Nullable))statusChangeHandler SWIFT_WARN_UNUSED_RESULT;
/// Returns Call View Controller
/// Before showing that screen you may want to check <code>microphone permission</code>, <code>digital line</code> status, and <code>recording consent</code> first.
/// You can use this already prepared view controller, with all required logic for making calls.
/// \param callData Data which contains all required call details such as <code>DigitaLine</code> and <code>RecordingConsentAnswer</code>.
///
/// \param callDidFinishHandler Handler which will be called when the call is finished with CallScreen and CallSummary as parameters. Will be called for both success and failure scenarios.
///
///
/// returns:
/// <code>CallScreen</code> which is also <code>UIViewController</code> with all configured UI and logic for making calls.
- (UIViewController <CallScreen> * _Nonnull)makeCallViewControllerWith:(id <CallData> _Nonnull)callData callDidFinishHandler:(void (^ _Nonnull)(NSTimeInterval, NSError * _Nullable))callDidFinishHandler SWIFT_WARN_UNUSED_RESULT;
@end


@interface ZDKTalk (SWIFT_EXTENSION(TalkSDK))
/// Starts the call flow. All screens are presented modally.
/// If necessary, first configuration screen is presented where the user is asked to grant microphone access permission (if were not provided earlier) and call recording consent (if required). After appropriate permissions are granted the call screen is presented and the call with agent will be started.
/// \param digitalLine name of digital line configured by the admin in Talk Settings
///
- (void)startCallToDigitalLine:(NSString * _Nonnull)digitalLine;
@end


/// Represents a call created by Talk SDK.
/// Responsibility of this class is to provide set of basic operations related to the ongoing call, like muting, disconnecting or changing audio output type.
SWIFT_PROTOCOL("_TtP7TalkSDK8TalkCall_")
@protocol TalkCall
/// Property that defines if the call is muted.
/// Mutes or un-mutes the call depending on the value of <em>muted</em>.
/// Default value is <code>false</code>.
@property (nonatomic) BOOL muted;
/// Property that shows duration of call in seconds.
/// Default value is <code>0</code>. It will be <code>0</code> until the call is started.
@property (nonatomic, readonly) NSTimeInterval duration;
/// Ends the ongoing call.
/// If the call was not disconnected before - then the <code>TalkProvider.call.onStatusChange</code>  will be called with <code>CallStatus.disconnected</code>.
/// If the call was already disconnected - then the <code>TalkProvider.call.onStatusChange</code> will not be called.
- (void)disconnect;
/// Device specified audio output.
/// Default value is <code>AudioOutput.headset</code>.
@property (nonatomic) enum AudioOutput audioOutput;
/// Current audio routing for call’s audio input and output.
@property (nonatomic, strong) id <AudioRoutingOption> _Nullable audioRouting;
/// List of all currently available audio routing options provided by the device.
@property (nonatomic, readonly, copy) NSArray<id <AudioRoutingOption>> * _Nonnull availableAudioRoutingOptions;
@end


/// <code>CallData</code> conforming class that represents parameters required to make a call.
SWIFT_CLASS_NAMED("TalkCallData")
@interface ZDKTalkCallData : NSObject <CallData>
@property (nonatomic, readonly, copy) NSString * _Nonnull digitalLine;
@property (nonatomic, readonly) enum RecordingConsentAnswer recordingConsentAnswer;
- (nonnull instancetype)initWithDigitalLine:(NSString * _Nonnull)digitalLine recordingConsentAnswer:(enum RecordingConsentAnswer)recordingConsentAnswer OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents errors occuring for a <code>failed</code> or <code>disconnected</code> call.
typedef SWIFT_ENUM(NSInteger, TalkCallError, open) {
/// No digital line was found with a provided name.
  TalkCallErrorDigitalLineNotFound = 0,
/// Establishing the call failed because of network issues.
  TalkCallErrorNetworkError = 1,
/// The app is not authorized to make a call.
  TalkCallErrorUnauthorized = 2,
/// An unknown error occurred while establishing the call.
  TalkCallErrorUnknown = 3,
};
static NSString * _Nonnull const TalkCallErrorDomain = @"TalkSDK.TalkCallError";





















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
#endif
